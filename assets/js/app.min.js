/* GitMD minified app.js (simple minify) */
const SAMPLE = `# Welcome to GitMD

This is a live preview of GitHub Flavored Markdown.

- Supports **GFM** tables, strikethrough, task lists

## Code

\`\`\`js
function greet(name){
  return \`Hello, \${name}\`;
}
console.log(greet('GitMD'));
\`\`\`

> Drop a .md file or use the upload button.
`;
const editor = document.getElementById("editor"),
	preview = document.getElementById("preview"),
	fileInput = document.getElementById("fileInput"),
	loadSample = document.getElementById("loadSample"),
	clearEditor = document.getElementById("clearEditor"),
	downloadMd = document.getElementById("downloadMd"),
	exportHtml = document.getElementById("exportHtml"),
	copyHtml = document.getElementById("copyHtml"),
	copyMd = document.getElementById("copyMd"),
	toggleWrap = document.getElementById("toggleWrap"),
	themeToggle = document.getElementById("themeToggle"),
	dropHint = document.getElementById("dropHint");
marked.setOptions({ gfm: !0, breaks: !0, headerIds: !0, mangle: !1, smartLists: !0 });
function highlightCodeBlocks(e) {
	e.querySelectorAll("pre code").forEach((t) => {
		try {
			hljs.highlightElement(t);
		} catch (e) {}
	});
}
function renderMarkdown(e) {
	const t = marked.parse(e || "");
	preview.innerHTML = DOMPurify.sanitize(t, { USE_PROFILES: { html: !0 } });
	highlightCodeBlocks(preview);
}
function saveState() {
	try {
		localStorage.setItem("gitmd:last", editor.value);
	} catch (e) {}
}
function restoreState() {
	const e = localStorage.getItem("gitmd:last");
	e ? (editor.value = e) : (editor.value = SAMPLE);
}
let raf = null;
function scheduleRender() {
	raf && cancelAnimationFrame(raf),
		(raf = requestAnimationFrame(() => {
			renderMarkdown(editor.value), saveState(), (raf = null);
		}));
}
fileInput.addEventListener("change", (e) => {
	const t = e.target.files && e.target.files[0];
	if (!t) return;
	const n = new FileReader();
	(n.onload = () => {
		(editor.value = n.result), scheduleRender();
	}),
		n.readAsText(t);
});
["dragenter", "dragover"].forEach((e) => {
	document.addEventListener(
		e,
		(t) => {
			t.preventDefault(), dropHint.classList.add("visible");
		},
		!1
	);
}),
	["dragleave", "drop"].forEach((e) => {
		document.addEventListener(
			e,
			(t) => {
				t.preventDefault(), dropHint.classList.remove("visible");
			},
			!1
		);
	}),
	document.addEventListener("drop", (e) => {
		const t = e.dataTransfer && e.dataTransfer.files && e.dataTransfer.files[0];
		if (!t) return;
		const n = new FileReader();
		(n.onload = () => {
			(editor.value = n.result), scheduleRender();
		}),
			n.readAsText(t);
	}),
	loadSample.addEventListener("click", () => {
		(editor.value = SAMPLE), scheduleRender(), editor.focus();
	}),
	clearEditor.addEventListener("click", () => {
		(editor.value = ""), scheduleRender(), editor.focus();
	}),
	copyHtml.addEventListener("click", async () => {
		try {
			await navigator.clipboard.writeText(preview.innerHTML), (copyHtml.textContent = "Copied!"), setTimeout(() => (copyHtml.textContent = "Copy HTML"), 1500);
		} catch (e) {
			(copyHtml.textContent = "Failed"), setTimeout(() => (copyHtml.textContent = "Copy HTML"), 1500);
		}
	}),
	themeToggle.addEventListener("change", (e) => {
		const t = e.target.checked;
		document.body.classList.toggle("dark", t);
		const n = document.getElementById("hljs-theme");
		n.href = t ? "https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css" : "https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/github.min.css";
	}),
	document.addEventListener("keydown", (e) => {
		if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === "s") {
			e.preventDefault(), saveState(), (clearEditor.textContent = "Saved"), setTimeout(() => (clearEditor.textContent = "Clear"), 900);
		}
		if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === "l") {
			e.preventDefault(), (editor.value = SAMPLE), scheduleRender();
		}
	}),
	editor.addEventListener("input", scheduleRender),
	restoreState(),
	scheduleRender(),
	Array.from(document.querySelectorAll(".file-input-label")).forEach((e) => {
		(e.tabIndex = 0),
			e.addEventListener("keydown", (t) => {
				if (t.key === "Enter" || t.key === " ") document.getElementById("fileInput").click();
			});

		downloadMd.addEventListener("click", () => {
			const e = new Blob([editor.value], { type: "text/markdown;charset=utf-8" }),
				t = URL.createObjectURL(e),
				n = document.createElement("a");
			(n.href = t), (n.download = "document.md"), document.body.appendChild(n), n.click(), n.remove(), URL.revokeObjectURL(t);
		});

		exportHtml.addEventListener("click", () => {
			const e = `<!doctype html><meta charset="utf-8"><title>Exported HTML</title><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.2.0/github-markdown-light.min.css"><article class='markdown-body'>${preview.innerHTML}</article>`,
				t = new Blob([e], { type: "text/html;charset=utf-8" }),
				n = URL.createObjectURL(t),
				o = document.createElement("a");
			(o.href = n), (o.download = "export.html"), document.body.appendChild(o), o.click(), o.remove(), URL.revokeObjectURL(n);
		});

		copyMd.addEventListener("click", async () => {
			try {
				await navigator.clipboard.writeText(editor.value), (copyMd.textContent = "Copied!"), setTimeout(() => (copyMd.textContent = "Copy MD"), 1500);
			} catch (e) {
				(copyMd.textContent = "Failed"), setTimeout(() => (copyMd.textContent = "Copy MD"), 1500);
			}
		});

		toggleWrap.addEventListener("click", () => {
			const e = editor.classList.toggle("wrap-on");
			e ? (editor.classList.remove("wrap-off"), (toggleWrap.textContent = "Wrap: On")) : (editor.classList.add("wrap-off"), (toggleWrap.textContent = "Wrap: Off"));
		});
	}),
	(window.GitMD = { renderMarkdown, restoreState, saveState });
